{"version":3,"sources":["components/Character/index.js","components/Score/index.js","components/Heading/index.js","App.js","serviceWorker.js","index.js"],"names":["Character","console","log","this","props","checkClass","className","id","onClick","clickLogic","src","img","alt","Component","Score","feedBack","score","Heading","children","href","App","state","imgBox","clickedList","scoreCount","correct","cycle","shuffleArr","forEach","i","clicked","push","setState","scoreUp","indexOf","length","table","arr","temporaryValue","randomIndex","currentIndex","Math","floor","random","map","ib","key","image","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9e60af2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './style.css';\r\n\r\nexport default class Character extends Component{\r\n    \r\n\r\n    render(){\r\n        console.log(this.props.checkClass);\r\n        \r\n        return(\r\n        <div className={`three columns character ${this.props.checkClass}-anim`} id={this.props.id} \r\n        onClick={() => this.props.clickLogic(this.props.id)}>\r\n            <img src={this.props.img} alt=\"img\" className=\"thumbnail\"></img>\r\n\r\n        </div>);\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport './style.css'; //style for main divs\r\n//styles for guesses\r\n\r\nexport default class Score extends Component {\r\n    \r\n    \r\n    render(){\r\n        \r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className={`twelve columns centered ${this.props.checkClass}`}>\r\n                    <h1 className=\"scoreTag\">{this.props.feedBack}</h1>\r\n                    <h1 className=\"scoreTag\">{this.props.score}</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './style.css';\r\n\r\nexport default class Heading extends Component {\r\n    render(){\r\n        return(\r\n            <div className='wrapper'>\r\n                <header>\r\n                    <div className='heading'>\r\n                        <h1 className='title'>Click-React-App</h1>\r\n                    </div>\r\n                </header>\r\n                <div className=\"container\">\r\n                    {this.props.children}\r\n                </div>\r\n                <footer>\r\n                    <div className=\"credits\" >\r\n                        <a href=\"https://nameless-dawn-61725.herokuapp.com\">Created by Ryan Mobley</a>\r\n                        <div className=\"git-wrapper\">\r\n                            <a href=\"https://github.com/The-Ryan-Mobley\" className=\"git-link\" >\r\n                                <img className=\"git-pic\" alt=\"git\" src=\"images/github.png\"></img>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport Character from './components/Character';\nimport imgBox from \"./imgBox.json\";\nimport Score from './components/Score';\nimport Heading from './components/Heading';\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {\n   imgBox,\n   clickedList: [],\n   scoreCount: 0,\n   feedBack: \"Select an Image!\",\n   correct: true\n  };\n  \n  cycle = id => { //shuffles the array and sets clicked to true\n     let imgBox = this.shuffleArr(this.state.imgBox);\n\n     imgBox.forEach(i => { \n        if(i.id === id){\n          i.clicked = true;\n          this.state.clickedList.push(id);\n        }\n      });\n    this.setState({ imgBox });\n  };\n  scoreUp = id => {\n    if(this.state.clickedList.indexOf(id) === -1){\n      let scoreCount = this.state.scoreCount;\n      scoreCount += 1 * (this.state.clickedList.length + 1);\n      let feedBack = \"Great!\";\n      this.setState({scoreCount, feedBack, correct: true});\n      \n    } else {\n      let clickedList = [];\n      let scoreCount = this.state.scoreCount - (2 * (this.state.clickedList.length + 1));\n      let feedBack = \"Fail!\";\n      this.setState({clickedList, scoreCount, feedBack, correct: false});\n    }\n    if(this.state.clickedList.length > 6){\n      let clickedList = [];\n      this.setState({clickedList});\n    }\n    console.table(this.state.correct);\n  }\n  clickLogic = id =>{\n    this.scoreUp(id);\n    this.cycle(id);\n    \n  }\n\n  shuffleArr = arr =>{\n    let currentIndex = arr.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = arr[currentIndex];\n      arr[currentIndex] = arr[randomIndex];\n      arr[randomIndex] = temporaryValue;\n    }\n    return arr;\n  \n  }\n  render(){\n    let checkClass = \"\";\n    this.state.correct ? checkClass = \"correct\" : checkClass = \"wrong\";\n    console.log(checkClass);\n  return (\n    <div className=\"App\">\n      <Heading>\n          <Score score={this.state.scoreCount} feedBack={this.state.feedBack} checkClass={checkClass}/>\n          <div className=\"row\">\n            <div className=\"twelve columns content\">\n            {this.state.imgBox.map(ib => (\n            <Character\n              key={ib.id}\n              clickLogic={this.clickLogic}\n              id={ib.id}\n              img={ib.image}\n              checkClass={checkClass}\n            />\n            ))}\n\n            </div>\n        </div>\n      </Heading>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}